# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle
on:
  push:
    paths:
      - src/**
      - .github/**
      - gradlew
      - build.gradle
      - gradlew.bat
      - settings.gradle
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag and Push docker image to AWS ECR
        env:
          ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
          ECR_NAMESPACE: ${{ vars.ECR_NAMESPACE }}
          SERVICE: ${{ vars.SERVICE }}
        run: |
          commit_hash=$(git rev-parse --short HEAD)
          imageName="$ECR_REGISTRY/$ECR_NAMESPACE/$SERVICE"
          docker build -t "$imageName:latest" .
          docker tag "$imageName:latest" "$imageName:$commit_hash"
          docker push "$imageName:latest"
          docker push "$imageName:$commit_hash"
      

      # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
      # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
      #
      # - name: Setup Gradle
      #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      #   with:
      #     gradle-version: '8.5'
      #
      # - name: Build with Gradle 8.5
      #   run: gradle build

  # 배포
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Build output to artifact
        uses: actions/download-artifact@v4
        with:
          name: build output
          #          path: |
          #            build/libs/
          #            information/pm2-setting/
          path: ./downloaded-artifact   # 하나의 폴더로 들어간다.
      - name: Check current folder
        run: ls downloaded-artifact
      - name: Deploy to ec2
        run: |
          ls
          echo "${{secrets.EC2_SSH_KEY}}" > private_key.pem
#          chmod 600 private_key.pem
#          scp -i private_key.pem -o StrictHostKeyChecking=no downloaded-artifact/build/libs/line-demo-0.0.1.jar ${{secrets.EC2_USER}}@${{secrets.EC2_HOST}}:/home/${{secrets.EC2_USER}}/workspace/
#          scp -i private_key.pem -o StrictHostKeyChecking=no downloaded-artifact/information/pm2-setting/server.json ${{secrets.EC2_USER}}@${{secrets.EC2_HOST}}:/home/${{secrets.EC2_USER}}/workspace/
#          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{secrets.EC2_USER}}@${{secrets.EC2_HOST}} "nohup pm2 restart /home/${{secrets.EC2_USER}}/workspace/server.json > app.log 2>&1 &"
#          rm -f private_key.pem
